#!/bin/bash
# mt workflow
# By Thomas Yssing Michaelsen
# Version
VERSION=0.1.0

### Description.---------------------------------------------------------------
USAGE="$(basename "$0") [-h] [-s file -t value -p path -r file] 
-- mt workflow v. $VERSION: QC of RNA reads, removal of rRNA, mapping to annotated genome. Outputs a file .txt file with counts and annotation of genes.  

where:
    -h  Show this help text.
    -i  List of files containing raw illumina short-read RNA sequencing data.
    -o  Output directory. 
    -t  Number of threads to use.
    -p	Directory to look for output generated by mt 'annotation'.
"

### Terminal arguments.--------------------------------------------------------
# Import user arguments
while getopts ':h:i:p:t:q' OPTION; do
  case $OPTION in
    h) echo "$USAGE"; exit 1;;
    i) SMPLS=$OPTARG;;
    t) THREAD=$OPTARG;;
    p) ANOTDIR=$OPTARG;;
    q) QC=YES;;
    :) printf "missing argument for -$OPTARG\n" >&2; exit 1;;
    \?) printf "invalid option for -$OPTARG\n" >&2; exit 1;;
  esac
done

# Check missing arguments
if [ ! -e $SMPLS ]; then
  printf "\n -i is not pointing to a valid file.\n\n"
  echo "$USAGE"
  exit 1
fi
if [ -z ${PROKDIR} ]; then PROKDIR=`echo $PWD`; fi;
if [ -z ${THREAD} ]; then THREAD=10; fi;
if [ -z ${QC+x} ]; then QC=NO; fi;

###############################################################################
# 1. Preparing RNA
###############################################################################
if [ "$QC" = "NO" ]; then
  $MT_DIR/mt_tools/mt_readprep -i $SMPLS -o RNAreads -t $THREAD
  cat RNAreads/*.fa > reads.fa
else 
  xx=$(find ./ -type d -name RNAreads) 
  cat $(find $xx/ -type f -name '*.fa') > reads.fa
fi

###############################################################################
# 2. Mapping
###############################################################################
echo "(mini)mapping..."
minimap2 -c -t $THREAD $PROKDIR/*anot.fasta reads.fa 2>/dev/null > tmp.paf

# Build wide-table from minimap2 output and subset to specific sequence identity.
echo "Building table..."
seqID=0.98 # sequence identity to use. 
awk -v seqID=$seqID '{ $2=$10/$11 } $2 >= seqID {sub(/\..*$/,"",$1); print $1, $6}' tmp.paf | sort | uniq -c | awk '{printf("%s\t%s\t%s\n", $2, $3, $1)}' | gawk '
      { samples[$1]++ }
      { genes[$2]++ }
      {val[$2][$1] = $3}
END {
   printf "ID" 
   for (j in samples) {printf "\t%s", j} 
   printf "\n"
   for (i in genes) {
       printf i
       for (j in samples) {printf "\t%s", 0+val[i][j]} 
       printf "\n"
   } 
}' > tab
rm tmp.paf

# Combine table with annotation. 
join <(sed 's/,/\t/' $PROKDIR/*anot.tbl | sort) <(sort tab) -t $'\t' > tmp.tbl
cat <(head -1 tab | sed 's/\t/\tMetadata\t/') tmp.tbl > counts.txt 
rm tab tmp.tbl


